export class TelegramService {
  private botToken: string;
  private chatId: string;
  private baseUrl: string;

  constructor(botToken: string, chatId: string) {
    this.botToken = botToken;
    this.chatId = chatId;
    this.baseUrl = `https://api.telegram.org/bot${botToken}`;
  }

  async sendSignal(signal: {
    symbol: string;
    direction: string;
    entryPrice: string;
    stopLoss: string;
    takeProfit: string;
    probability: number;
    strategies: string[];
    confluences: string[];
    timeframe: string;
  }): Promise<boolean> {
    try {
      const message = this.formatSignalMessage(signal);
      
      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      if (!response.ok) {
        throw new Error(`Telegram API error: ${response.statusText}`);
      }

      return true;
    } catch (error) {
      console.error('Failed to send Telegram signal:', error);
      return false;
    }
  }

  private formatSignalMessage(signal: {
    symbol: string;
    direction: string;
    entryPrice: string;
    stopLoss: string;
    takeProfit: string;
    probability: number;
    strategies: string[];
    confluences: string[];
    timeframe: string;
  }): string {
    const emoji = signal.direction === 'BUY' ? '🟢' : '🔴';
    const probabilityEmoji = signal.probability >= 90 ? '🔥' : signal.probability >= 80 ? '⚡' : '📊';
    
    return `${emoji} <b>${signal.symbol} ${signal.direction}</b> ${probabilityEmoji}

📈 <b>Entry:</b> ${parseFloat(signal.entryPrice).toFixed(signal.symbol.includes('XAU') ? 2 : 2)}
🛡️ <b>SL:</b> ${parseFloat(signal.stopLoss).toFixed(signal.symbol.includes('XAU') ? 2 : 2)}
🎯 <b>TP:</b> ${parseFloat(signal.takeProfit).toFixed(signal.symbol.includes('XAU') ? 2 : 2)}

📊 <b>Probability:</b> ${signal.probability}%
⏰ <b>Timeframe:</b> ${signal.timeframe}

🧠 <b>Strategies:</b> ${signal.strategies.join(', ')}
🔗 <b>Confluences:</b> ${signal.confluences.join(', ')}

<i>Generated by XAU/BTC Scanner - ICT/SMC Fusion</i>`;
  }

  async sendTestMessage(): Promise<boolean> {
    try {
      const message = `🧪 <b>Test Signal</b>

✅ Telegram integration is working correctly!
🤖 Bot is ready to send real trading signals.

<i>XAU/BTC Scanner - Test Complete</i>`;

      const response = await fetch(`${this.baseUrl}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: this.chatId,
          text: message,
          parse_mode: 'HTML',
        }),
      });

      return response.ok;
    } catch (error) {
      console.error('Failed to send test message:', error);
      return false;
    }
  }
}
